[tool.poetry]
name = "meerqtt"
version = "0.1.0"
description = "meerqtt (/ˈmɪr.kæt/) is a Python MQTT client"
authors = ["Peter Vyboch <pvyboch1@gmail.com>"]
license = "MIT"
repository = 'https://github.com/petereon/meerqtt'
readme = 'README.md'
keywords = ["python"]
classifiers = ['License :: OSI Approved :: MIT License', 'Programming Language :: Python :: 3']
packages = [{ include = "meerqtt", from = "src" }]

[tool.poe]
verbosity = -1

[tool.poe.tasks]
"isort" = { shell = "poetry run isort ./src/" }
"black" = { shell = "poetry run black ./src/" }
"mypy" = { shell = "poetry run mypy ./src/" }
"flake8" = { shell = 'poetry run pflake8 ./src/' }
"perflint" = { shell = "poetry run perflint ./src/" }

lint = { shell = 'echo "Running isort..." ; poetry run poe isort; echo "Running black..." ; poetry run poe black ; echo "Running unify..." ; poetry run unify ./src -r -i ; echo "Running flake8..." ; poetry run poe flake8 ; echo "Running mypy..." ; poetry run poe mypy ; echo Done!' }
"lint:watch" = {shell = "poetry run poe lint; poetry run watchmedo shell-command --patterns='*.py;*.feature;*.toml' --recursive --drop --command='echo \"\nDetected changes, rerunning...\n\" ; poetry run poe lint'"}
"lint:perf" = { shell = "poe lint; echo 'Running perflint...' poe perflint;"}

"test" = { shell = "poetry run ward" }
"test:watch" = { shell = "poetry run ward; poetry run watchmedo shell-command --patterns='*.py;*.feature;*.toml' --recursive --drop --command='poetry run ward'" }

"bdd" = { shell = "poetry run behave" }
"bdd:watch" = { shell = "poetry run behave; poetry run watchmedo shell-command --patterns='*.py;*.feature;*.toml' --recursive --drop --command='poetry run behave'" }

"test:all" = { shell = "poe test; poe bdd" }

"docs" = { shell = "poetry run pydoc-markdown > APIDOC.md"}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[[tool.pydoc-markdown.loaders]]
type = 'python'
search_path = ['./src']

[tool.pydoc-markdown.renderer]
type = 'markdown'

[tool.ward]
hook_module = ["ward_coverage"]
path = ["test"]

[tool.ward.plugins.coverage]
report_type = ["term", "xml"]
source = ["./src/"]
omit = ["*test*", "**/__init__.py"]
branch = true
relative_files = true

[tool.mypy]
files = ["src"]
exclude = [
    "^.*test.*\\.py$",  # excluding test files
]

error_summary = true

warn_return_any = true
warn_no_return = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

disallow_untyped_defs = true
disallow_incomplete_defs = true

show_column_numbers = true
show_error_context = true

[tool.black]
line-length = 140
skip-string-normalization = true
extend-exclude = "(.venv)"

[tool.isort]
profile = "black"

[tool.flake8]
max-line-length = 140
max-complexity = 18
select = ["B","E","F","W","T4","B9"]
extend-ignore = ['E203']


[tool.poetry.dependencies]
python = "^3.9"
paho-mqtt = "^1.6.1"
pydantic = "^1.10.2"


[tool.poetry.dev-dependencies]
# Code Scanning and Formatting
black = { version = "*", allow-prereleases = true }
mypy = "^1.0.0"
flake8 = "<5.0.0"
pyproject-flake8 = "0.0.1a4"

## Bugs
flake8-simplify = '*'
flake8-pie = '*'
flake8-bandit = '*'

## Complexity
flake8-cognitive-complexity = '*'
flake8-expression-complexity = '*'
radon = '*'
xenon = '*'

## Lints
flake8-quotes = '*'
flake8-print = '*'
flake8-eradicate = '*'
flake8-comments = '*'
toml-sort = '*'
isort = '*'
unify = "*"

## Performance
perflint = "^0.7.3"

# Testing
ward = "^0.66.1-beta.0"
behave = "^1.2.6"
mock = "4.0.3"
expycted = "^0.5.0"
mutatest = "*"

# Coverage
ward-coverage = "^0.3.0"

# Task Runner
poethepoet = "*"

# Docs
pydoc-markdown = "^4.6.3"

# CI
pre-commit = "*"
detect-secrets = "^1.2.0"

# Utils
watchdog = "^2.1.9"
